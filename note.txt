1、在Mac下搭建jenkins+github环境 : http://crazysky.iteye.com/blog/1763673
2、在MAC上使用TREE命令：gaibing2009.diandian.com/?p=536
3、在 Mac mini 上架设 Jenkins 服务器来运行 iOS 测试  : linjunpop.logdown.com/posts/162202-set-up-jenkins-server-on-the-mac-mini-to-run-ios-tests
4、Installing Gitlab on OS X：thoughtpointers.net/2012/10/07/installing-gitlab-on-os-x/
5、IOS使用Jenkins进行持续集成:www.itnose.net/detail/6075531.html
6、iOS自动化编译:www.cnblogs.com/brycezhang/p/4097487.html
7、搭建自己的git 代码服务器 ： blog.chinaunix.net/uid-27105712-id-4511124.html
8、MQTT协议笔记之连接和心跳 : www.tuicool.com/articles/AFvmee
9、64-bit Tips ： blog.sunnyxx.com/2014/12/20/64-bit-tips/
10、How To Write Cocoa Object Getters and Setters ： http://vgable.com/blog/tag/autorelease/
11、iOS 集合的深复制与浅复制 ： https://www.zybuluo.com/MicroCai/note/50592
12、JSPatch实现原理详解 ： blog.cnbang.net/tech/2808/
13、http://blog.sunnyxx.com/
14、如何自己动手实现 KVO : tech.glowing.com/cn/implement-kvo/
15、Should IBOutlets be strong or weak under ARC? ： stackoverflow.com/questions/7678469/should-iboutlets-be-strong-or-weak-under-arc
文章告诉我们：

因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。
不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系
16、谷歌浏览器(chrome)"时空隧道"插件安装与使用:jingyan.baidu.com/article/6d704a1312c87728db51ca81.html?st=2&os=0&bd_page_type=1&net_type=1
17、iOS图片加载速度极限优化—FastImageCache解析 ： blog.cnbang.net/tech/2578/
18、OC js 交互 ： www.itnose.net/detail/6238745.html
19、http://nshipster.com/
20、iOS：关于获取网络类型和运营商信息：http://www.open-open.com/lib/view/open1409821903369.html
21、Mach-O 可执行文件 ： blog.jobbole.com/51527/
22、GLoow团队http://tech.glowing.com/cn/
23、XCode编译速度慢的解决方案 ： www.2cto.com/kf/201406/308256.html
24、静态库中采用ObjectC++实现，因此需要您保证您工程中至少有一个.mm后缀的源文件(您可以将任意一个.m后缀的文件改名为.mm)，或者在工程属性中指定编译方式，即将Xcode的Project -> Edit Active Target -> Build -> GCC4.2 - Language -> Compile Sources As设置为"Objective-C++"
25、iOS程序模块化设计 ： www.cnblogs.com/JoelZeng/p/4124043.html
26、怎样利用Cocoapods模块化开发你的app：my.oschina.net/zboy/blog/214935?p={{totalPage}}
27、//UIImage* ImageA;
CGImageRef image = [ImageA CGImage];
 
CGSize image_size = ImageA.size;
 
CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
void* data = malloc(image_size.width * image_size.height * 4);
CGContextRef context = 
CGBitmapContextCreate(data, image_size.width, image_size.height, 8, 4 * image_size.width, colorSpace, 
kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
CGContextDrawImage(context, CGRectMake(0, 0, leftwidth, image_size.height), image);
/*
data中就是你要得原始bmp图了, 没有文件头
*/
CGContextRelease(context);
free(data);
28、GCD实现倒计时
 __block int timeout=300; //倒计时时间  
  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);  
  dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);  
  dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行  
  dispatch_source_set_event_handler(_timer, ^{  
      if(timeout<=0){ //倒计时结束，关闭  
          dispatch_source_cancel(_timer);  
          dispatch_release(_timer);  
          dispatch_async(dispatch_get_main_queue(), ^{  
//设置界面的按钮显示 根据自己需求设置  
              。。。。。。。。  
          });  
      }else{  
          int minutes = timeout / 60;  
          int seconds = timeout % 60;  
          NSString *strTime = [NSString stringWithFormat:@"%d分%.2d秒后重新获取验证码",minutes, seconds];  
          dispatch_async(dispatch_get_main_queue(), ^{  
              //设置界面的按钮显示 根据自己需求设置  
。。。。。。。。  
          });  
          timeout--;  
            
      }  
  });  
  dispatch_resume(_timer);  
  29、PNG (Portable Network Graphics) Specification ： www.w3.org/TR/PNG-Structure.html
  30、将hexo博客同时托管到github和gitcafe : www.tuicool.com/articles/QFzUbm
  31、http://ksnowlv.github.io/blog/archives/
  32、http://www.olinone.com/
  33、http://blog.maxwi.com/
  34、https://pages.github.com/
  35、http://hahaya.github.io/
  36、http://nianxi.net/
  37、Mac下的top命令
DEC 27TH, 2011
以前只是在linux机器上使用top命令。常用的快键键是:

p键 – 按cpu使用率排序
m键 – 按内存使用量排序
这2个快捷键在mac上都不一样。对应的是，先输入o，然后输入cpu则按cpu使用量排序，输入rsize则按内存使用量排序。

如果记不清了，可以在top的界面上按?，在弹出的帮助界面中即可看到。
38、Make it run, then make it right, then make it fast.
39、Expert C Programming(中文版) ： download.csdn.net/download/maxiaolin8412/304907
40、Linux内核学习路线:www.360doc.com/content/14/0612/16/17038653_386027485.shtml
41、

